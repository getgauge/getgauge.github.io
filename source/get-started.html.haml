---
credit: Photo Credit - Gerwin Sturm
credit_link: https://www.flickr.com/photos/scarygami/5568844961
---


.inner-banner
  .container
    %h1.caption Get Started

.page-content
  #downloads
    .download-area
      .container
        %h2.sub-title Choose your OS & download
        %ul.tabs.os
          %li.mac{:rel => "tab1"}
            %figure.os-logo
              = image_tag "download/osx.png", {:title => "Osx", :alt => "Osx"}
              %figcaption.desc OSX
          %li.windows{:rel => "tab2"}
            %figure.os-logo
              = image_tag "download/windows.png", {:title => "windows", :alt => "windows"}
              %figcaption.desc Windows
          %li.linux{:rel => "tab3"}
            %figure.os-logo
              = image_tag "download/linux.png", {:title => "linux", :alt => "linux"}
              %figcaption.desc Linux
    .os-tab-content
      .container
        .tab_container
          %h3.tab-accordion_heading.mac{ :rel => "tab1"} OSX
          #tab1.tab_content.mac{ :rel=> "tab1"}
            %p.instruction
              There are multiple ways to get started with Gauge on a Mac. Here we show you a simple 4 step process to get you running with Gauge on a Mac. You can read our
              %a{:href=>"https://docs.getgauge.io/installing.html", :target => "_blank"} detailed documentation
              for other methods of installation.
            .page-block
              %h3 Install Gauge
              %p.instruction
                Download the installer below based on your system configuration and just click your way through to install Gauge. You will need to use this method if your setup or organization does not allow
                %a{:href => "http://brew.sh/", :target => "_blank"} brew.
              %span.download-title
                %strong pkg
                ( latest stable version:
                %os= data.info.version
                )
              .download-section
                .download-bit
                  %a.download{:href => "https://github.com/getgauge/gauge/releases/download/v#{data.info.version}/gauge-#{data.info.version}-darwin.x86.pkg"} 32 bit
                  %span.sha
                    %strong SHA-1:
                    #{data.info.darwin86}
                .download-bit
                  %a.download{:href => "https://github.com/getgauge/gauge/releases/download/v#{data.info.version}/gauge-#{data.info.version}-darwin.x86_64.pkg"} 64 bit
                  %span.sha
                    %strong SHA-1:
                    #{data.info.darwin86_64}


              %p.instruction We would recommend using brew for a very simple straightforward installation using this command.
              .code-box
                %code ~ $ brew update
                %code ~ $ brew install gauge
            .page-block
              %h3 Install core plugins
              %p.instruction  Gauge has a rich plugin repository. Language runners, IDEs, and reports are all plugins. Since Gauge is a first class command line tool, you only *need* one plugin to get your Gauge tests running. That is your language runner plugin.
              .code-box
                %code ~ $ gauge --install java
              %p.instruction
                Read more about how to install other language runners and plugins
                %a{:href=>"https://docs.getgauge.io/plugins.html#installation", :target => "_blank"} here.
            .page-block
              %h3 Test your installation
              %p.instruction  Check that all plugins are installed and are at the latest version by running this command.
              .code-box
                %code ~ $ gauge -v
                %pre
                  :preserve
                    Gauge version: 0.5.0

                    Plugins
                    -------
                    java(0.4.1)
            .page-block
              %h3 See Gauge working
              %p.instruction
                Initialize a new Gauge project in the language of your choice. You can read more about initialization
                %a{:href => "https://docs.getgauge.io/quickstart.html#creating-a-project", :target => "_blank" }here.
                This creates a template with a sample test specification. The example below shows how to execute test specifications in Java, but the same applies to all supported languages.
              .code-box
                %code ~ $ gauge --init java
              %p.instruction Now run the sample specification to see how Gauge works.
              .code-box
                %code ~ $ gauge specs
                %pre
                  :preserve
                    Specifications:	1 executed	1 passed	0 failed	0 skipped
                    Scenarios:    	2 executed	2 passed	0 failed	0 skipped

                    Total time taken: 80ms
              %p.instruction You're all set. Start testing!
          %h3.tab-accordion_heading.windows{ :rel => "tab2"} Windows
          #tab2.tab_content.windows{ :rel => "tab2"}
            %P.instruction
              There are two ways to install Gauge on Windows. Below we show the process using the .exe. The other option is to use
              %a{:href => "https://chocolatey.org"}Chocolatey.
              Read more
              %a{:href => "https://docs.getgauge.io/installing.html"} here
              about how to install Gauge using Chocolatey.
            .page-block
              %h3  Install Gauge
              .instruction  Download the exe based on your system configuration and run it. Click your way through till you're asked to select your language. The next section explains what that means.

              %span.download-title
                %strong exe
                %i
                  (latest stable version:
                  %os= data.info.version
                  )
              .download-section
                .download-bit
                  %a.download.button{:href => "https://github.com/getgauge/gauge/releases/download/v#{data.info.version}/gauge-#{data.info.version}-windows.x86.exe"} 32 bit
                  %span.sha
                    %strong SHA-1:
                    #{data.info.windows86}
                .download-bit
                  %a.download.button{:href => "https://github.com/getgauge/gauge/releases/download/v#{data.info.version}/gauge-#{data.info.version}-windows.x86_64.exe"} 64 bit
                  %span.sha
                    %strong SHA-1:
                    #{data.info.windows86_64}

            .page-block
              %h3 Install core plugins
              %P.instruction  Gauge has a rich plugin repository. Language runners, IDEs, and reports are all plugins. Since Gauge is a first class command line tool, you only *need* one plugin to get your Gauge tests running. That is your language runner plugin.
              %P.instruction  The Windows installer allows you to select the language plugin(s) as part of the the installation process. Check the box(es) you want to install. You can select more than one language plugin to install.
              .img-container
                %img{:alt => "Select language", :src => asset_path(:images, 'install-lang-runner.jpg')}
              %P.instruction Follow the remaining installation steps.

              .page-block
              %h3 Test your installation
              %P.instruction  Check that all plugins are installed and are at the latest version by running this command.
              .code-box
                %code > gauge -v
                %pre
                  :preserve
                    Gauge version: 0.5.0

                    Plugins
                    -------
                    csharp(0.7.2)
            .page-block
              %h3 See Gauge working
              %P.instruction
                Initialize a new Gauge project in the language of your choice. You can read more about initialization
                %a{:href => "https://docs.getgauge.io/quickstart.html#creating-a-project", :target => "_blank" }here.
                This creates a template with a sample test specification. The example below shows how to execute test specifications in C#, but the same applies to all supported languages.
              .code-box
                %code > gauge --init csharp
              %P.instruction Now run the sample specification to see how Gauge works.
              .code-box
                %code > gauge specs
                %pre
                  :preserve
                    Specifications:	1 executed	1 passed	0 failed	0 skipped
                    Scenarios:    	2 executed	2 passed	0 failed	0 skipped

                    Total time taken: 80ms
              %P.instruction You're all set. Start testing!
          %h3.tab-accordion_heading.linux{ :rel => "tab3"} Linux
          #tab3.tab_content.linux{ :rel => "tab3"}
            %P.instruction Gauge can be installed on any flavour of Linux using the shell script. The following steps will guide you to a quick install on a linux box.
            .page-block
              %h3 Install Gauge
              %p.instruction  Install Gauge by downloading the .zip below. Choose the archive file based on your system configuration.

              %span.download-title
                %strong zip
                %i
                  (latest stable version:
                  %os= data.info.version
                  )
              .download-section
                .download-bit
                  %a.download.button{:href => "https://github.com/getgauge/gauge/releases/download/v#{data.info.version}/gauge-#{data.info.version}-linux.x86.zip"} 32 bit
                  %span.sha
                    %strong SHA-1:
                    #{data.info.linux86}
                .download-bit
                  %a.download.button{:href => "https://github.com/getgauge/gauge/releases/download/v#{data.info.version}/gauge-#{data.info.version}-linux.x86_64.zip"} 64 bit
                  %span.sha
                    %strong SHA-1:
                    #{data.info.linux86_64}
              %p.instruction
                Then execute the following command:
              .code-box
                %code ~ $ unzip gauge-$VERSION-$OS.$ARCH.zip
                %code ~ $ ./install.sh
            .page-block
              %h3 Install core plugins
              %p.instruction  Gauge has a rich plugin repository. Language runners, IDEs, and reports are all plugins. Since Gauge is a first class command line tool, you only *need* one plugin to get your Gauge tests running. That is your language runner plugin.
              .code-box
                %code ~ $ gauge --install java
              %p.instruction
                You can read more about how to install other language runners and plugins
                %a{:href=>"/documentation/user/current/plugins/installation.html"} here.

            .page-block
              %h3 Test your installation
              %p.instruction  Check that all plugins are installed and are at the latest version by running this command.
              .code-box
                %code ~ $ gauge -v
                %pre
                  :preserve
                    Gauge version: 0.5.0

                    Plugins
                    -------
                    java(0.4.1)
            .page-block
              %h3 See Gauge working
              .instruction
                Initialize a new Gauge project in the language of your choice. You can read more about initialization
                %a{:href => "https://docs.getgauge.io/quickstart.html#creating-a-project", :target => "_blank" }here.
                This creates a template with a sample test specification. The example below shows how to execute test specifications in Java, but the same applies to all supported languages.
              .code-box
                %code ~ $ gauge --init java
              %p.instruction Now run the sample specification to see how Gauge works.
              .code-box
                %code ~ $ gauge specs
                %pre
                  :preserve
                    Specifications:	1 executed	1 passed	0 failed	0 skipped
                    Scenarios:    	2 executed	2 passed	0 failed	0 skipped

                    Total time taken: 80ms
              %p.instruction You're all set. Start testing!

          = javascript_include_tag  "jquery.client"
          = javascript_include_tag  "tabs"
